/* --------------------------------------------------------------------------------
 #
 #  4DPlugin-Dock-Tile.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : Dock Tile
 #	author : miyako
 #	2020/02/06
 #  
 # --------------------------------------------------------------------------------*/

#include "4DPlugin-Dock-Tile.h"

#pragma mark -

void PluginMain(PA_long32 selector, PA_PluginParameters params) {
    
	try
	{
        switch(selector)
        {
			// --- Dock Tile
            
			case 1 :
				DOCK_Get_badge(params);
				break;
			case 2 :
				DOCK_SET_BADGE(params);
				break;
			case 3 :
				DOCK_CANCEL_BOUNCE(params);
				break;
			case 4 :
				DOCK_Bounce(params);
				break;
			case 5 :
				DOCK_SET_ICON(params);
				break;
			case 6 :
				DOCK_Get_icon(params);
				break;
			case 7 :
				DOCK_GET_SIZE(params);
				break;
			case 8 :
				DOCK_GET_SCREEN_FRAME(params);
				break;

        }

	}
	catch(...)
	{

	}
}

#pragma mark -

void DOCK_Get_badge(PA_PluginParameters params) {

    NSDockTile *dockTile = [[NSApplication sharedApplication]dockTile];

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    C_TEXT returnValue;
    
    returnValue.setUTF16String([dockTile badgeLabel]);
    returnValue.setReturn(pResult);
}

void DOCK_SET_BADGE(PA_PluginParameters params) {

    PackagePtr pParams = (PackagePtr)params->fParameters;
    C_TEXT Param1;

    Param1.fromParamAtIndex(pParams, 1);
    
    NSDockTile *dockTile = [[NSApplication sharedApplication]dockTile];
    
    if(Param1.getUTF16Length())
    {
        NSString *badgeLabel = Param1.copyUTF16String();
        [dockTile setBadgeLabel:badgeLabel];
        [badgeLabel release];
    }else{
        [dockTile setBadgeLabel:nil];
    }
}

void DOCK_CANCEL_BOUNCE(PA_PluginParameters params) {

    NSInteger request = (NSRequestUserAttentionType)PA_GetLongParameter(params, 1);
    
    [[NSApplication sharedApplication]cancelUserAttentionRequest:request];
}

void DOCK_Bounce(PA_PluginParameters params) {

    NSRequestUserAttentionType type = (NSRequestUserAttentionType)PA_GetLongParameter(params, 1);

    NSInteger returnValue = [[NSApplication sharedApplication]requestUserAttention:type];
    PA_SetLongParameter(params, 1, (PA_long32)returnValue);
}

void DOCK_SET_ICON(PA_PluginParameters params) {

    PA_Picture p = PA_GetPictureParameter(params, 1);
    CGImageRef cgImage = (CGImageRef)PA_CreateNativePictureForScreen(p);
    
    if(cgImage) {
        NSImage *nsImage = [[NSImage alloc]initWithCGImage:cgImage size:NSZeroSize];
        CFRelease(cgImage);
        if(nsImage) {
            [[NSApplication sharedApplication]setApplicationIconImage:nsImage];
            [nsImage release];
        }
    }
}

void DOCK_Get_icon(PA_PluginParameters params) {

    NSData *data = [[[NSApplication sharedApplication]applicationIconImage]TIFFRepresentation];
    PA_Picture icon = PA_CreatePicture((void *)[data bytes],
                                       (PA_long32)[data length]);
    PA_ReturnPicture(params, icon);
}

void DOCK_GET_SIZE(PA_PluginParameters params) {

    NSDockTile *dockTile = [[NSApplication sharedApplication]dockTile];
    NSSize size = [dockTile size];
    
    PA_SetDoubleParameter(params, 1, size.width);
    PA_SetDoubleParameter(params, 2, size.height);
}

void DOCK_GET_SCREEN_FRAME(PA_PluginParameters params) {
    
    NSScreen *mainScreen = [NSScreen mainScreen];
    NSRect rect = [mainScreen visibleFrame];
    
    PA_SetDoubleParameter(params, 1, rect.origin.x);
    PA_SetDoubleParameter(params, 2, rect.origin.y);
    PA_SetDoubleParameter(params, 3, rect.size.width);
    PA_SetDoubleParameter(params, 4, rect.size.height);
}
